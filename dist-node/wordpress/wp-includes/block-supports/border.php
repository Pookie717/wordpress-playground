<?php
 function wp_register_border_support( $block_type ) { $has_border_support = block_has_support( $block_type, array( '__experimentalBorder' ) ); $has_border_color_support = wp_has_border_feature_support( $block_type, 'color' ); if ( ! $block_type->attributes ) { $block_type->attributes = array(); } if ( $has_border_support && ! array_key_exists( 'style', $block_type->attributes ) ) { $block_type->attributes['style'] = array( 'type' => 'object', ); } if ( $has_border_color_support && ! array_key_exists( 'borderColor', $block_type->attributes ) ) { $block_type->attributes['borderColor'] = array( 'type' => 'string', ); } } function wp_apply_border_support( $block_type, $block_attributes ) { if ( wp_should_skip_block_supports_serialization( $block_type, 'border' ) ) { return array(); } $classes = array(); $styles = array(); if ( wp_has_border_feature_support( $block_type, 'radius' ) && isset( $block_attributes['style']['border']['radius'] ) && ! wp_should_skip_block_supports_serialization( $block_type, '__experimentalBorder', 'radius' ) ) { $border_radius = $block_attributes['style']['border']['radius']; if ( is_array( $border_radius ) ) { foreach ( $border_radius as $key => $radius ) { $corner = strtolower( preg_replace( '/(?<!^)[A-Z]/', '-$0', $key ) ); $styles[] = sprintf( 'border-%s-radius: %s;', $corner, $radius ); } } else { if ( is_numeric( $border_radius ) ) { $border_radius .= 'px'; } $styles[] = sprintf( 'border-radius: %s;', $border_radius ); } } if ( wp_has_border_feature_support( $block_type, 'style' ) && isset( $block_attributes['style']['border']['style'] ) && ! wp_should_skip_block_supports_serialization( $block_type, '__experimentalBorder', 'style' ) ) { $border_style = $block_attributes['style']['border']['style']; $styles[] = sprintf( 'border-style: %s;', $border_style ); } if ( wp_has_border_feature_support( $block_type, 'width' ) && isset( $block_attributes['style']['border']['width'] ) && ! wp_should_skip_block_supports_serialization( $block_type, '__experimentalBorder', 'width' ) ) { $border_width = $block_attributes['style']['border']['width']; if ( is_numeric( $border_width ) ) { $border_width .= 'px'; } $styles[] = sprintf( 'border-width: %s;', $border_width ); } if ( wp_has_border_feature_support( $block_type, 'color' ) && ! wp_should_skip_block_supports_serialization( $block_type, '__experimentalBorder', 'color' ) ) { $has_named_border_color = array_key_exists( 'borderColor', $block_attributes ); $has_custom_border_color = isset( $block_attributes['style']['border']['color'] ); if ( $has_named_border_color || $has_custom_border_color ) { $classes[] = 'has-border-color'; } if ( $has_named_border_color ) { $classes[] = sprintf( 'has-%s-border-color', $block_attributes['borderColor'] ); } elseif ( $has_custom_border_color ) { $border_color = $block_attributes['style']['border']['color']; $styles[] = sprintf( 'border-color: %s;', $border_color ); } } $attributes = array(); if ( ! empty( $classes ) ) { $attributes['class'] = implode( ' ', $classes ); } if ( ! empty( $styles ) ) { $attributes['style'] = implode( ' ', $styles ); } return $attributes; } function wp_has_border_feature_support( $block_type, $feature, $default_value = false ) { if ( property_exists( $block_type, 'supports' ) && ( true === _wp_array_get( $block_type->supports, array( '__experimentalBorder' ), $default_value ) ) ) { return true; } return block_has_support( $block_type, array( '__experimentalBorder', $feature ), $default_value ); } WP_Block_Supports::get_instance()->register( 'border', array( 'register_attribute' => 'wp_register_border_support', 'apply' => 'wp_apply_border_support', ) ); 