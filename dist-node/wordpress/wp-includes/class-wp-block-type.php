<?php
 class WP_Block_Type { public $api_version = 1; public $name; public $title = ''; public $category = null; public $parent = null; public $ancestor = null; public $icon = null; public $description = ''; public $keywords = array(); public $textdomain = null; public $styles = array(); public $variations = array(); public $supports = null; public $example = null; public $render_callback = null; public $attributes = null; public $uses_context = array(); public $provides_context = null; public $editor_script = null; public $script = null; public $view_script = null; public $editor_style = null; public $style = null; const GLOBAL_ATTRIBUTES = array( 'lock' => array( 'type' => 'object' ), ); public function __construct( $block_type, $args = array() ) { $this->name = $block_type; $this->set_props( $args ); } public function render( $attributes = array(), $content = '' ) { if ( ! $this->is_dynamic() ) { return ''; } $attributes = $this->prepare_attributes_for_render( $attributes ); return (string) call_user_func( $this->render_callback, $attributes, $content ); } public function is_dynamic() { return is_callable( $this->render_callback ); } public function prepare_attributes_for_render( $attributes ) { if ( ! isset( $this->attributes ) ) { return $attributes; } foreach ( $attributes as $attribute_name => $value ) { if ( ! isset( $this->attributes[ $attribute_name ] ) ) { continue; } $schema = $this->attributes[ $attribute_name ]; $is_valid = rest_validate_value_from_schema( $value, $schema, $attribute_name ); if ( is_wp_error( $is_valid ) ) { unset( $attributes[ $attribute_name ] ); } } $missing_schema_attributes = array_diff_key( $this->attributes, $attributes ); foreach ( $missing_schema_attributes as $attribute_name => $schema ) { if ( isset( $schema['default'] ) ) { $attributes[ $attribute_name ] = $schema['default']; } } return $attributes; } public function set_props( $args ) { $args = wp_parse_args( $args, array( 'render_callback' => null, ) ); $args['name'] = $this->name; if ( ! isset( $args['attributes'] ) || ! is_array( $args['attributes'] ) ) { $args['attributes'] = array(); } foreach ( static::GLOBAL_ATTRIBUTES as $attr_key => $attr_schema ) { if ( ! array_key_exists( $attr_key, $args['attributes'] ) ) { $args['attributes'][ $attr_key ] = $attr_schema; } } $args = apply_filters( 'register_block_type_args', $args, $this->name ); foreach ( $args as $property_name => $property_value ) { $this->$property_name = $property_value; } } public function get_attributes() { return is_array( $this->attributes ) ? $this->attributes : array(); } } 